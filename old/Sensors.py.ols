# -*- coding: utf-8 -*-
"""
Created on Tue Dec 18 09:21:34 2018

@author: linus
"""
#installieren: requests

#fhem urls are:
#http://192.168.178.25:8087/fhem?cmd.Dummy=set%20PoolPH%20Wert
#http://192.168.178.25:8087/fhem?cmd.Dummy=set%20PoolORP%20Wert
#http://192.168.178.25:8087/fhem?cmd.Dummy=set%20PoolTemp%20Wert


import requests
import logging
from logging.handlers import TimedRotatingFileHandler
import time

def webhook(device, value):
    url = 'http://192.168.178.25:8087/fhem?cmd.Dummy=set%20' + device + '%20' + str(value)
    try:
        r = requests.get(url,timeout=5)
        logger.debug('webhook url: %s status: %s text: %s', url, r.status_code, r.reason)
    except requests.exceptions.ConnectionError as e:
        logger.warning('webhook url: %s error: %s', url, e.args[0].reason)
    pass


# format the log entries
formatter = logging.Formatter('%(asctime)s %(name)s %(levelname)s %(message)s')
handler = TimedRotatingFileHandler('sensors.log', 
                                   when='midnight',
                                   backupCount=10)
handler.setFormatter(formatter)
logger = logging.getLogger(__name__)
logger.addHandler(handler)
logger.setLevel(logging.DEBUG)

#logger.debug('starting: a debug message test')
#logger.info('starting: a informational message test')
#logger.warning('starting: a warning test')
#logger.error('starting: a error message test')
#logger.critical('starting: a critical failure test')
#logging.info('%s before you %s', 'Look', 'leap!')

starttime=time.time()
while True:
    print("ticks")
  
    #recieve sensor values from local sensors
    ##sensors
    ph = 7 #>from sensor
    orp = 680 #>from sensor
    temp = 3 #>from sensor

    ##pump can liquids (ml of can - amount pumped)
    ph_can = 25000 #fixed value here
    cl_can = 25000 #fixed value here

    #get pumped liquds ml from pump
    ph_pumped = 200 #>from pump
    cl_pumped = 300 #>from pump
    #set pump to zero with command:
    #http://127.0.0.1:5000/clnewcan?missing=0
    #http://127.0.0.1:5000/phnewcan?missing=0

    ph_liq = ph_can - ph_pumped
    cl_liq = cl_can - cl_pumped

    ##pump flow rate
    ph_flow = 20 #>actual flow from pump
    orp_flow = 30 #>actual flow from pump

    #then send sensor values to fhem
    webhook('PoolPHadd',ph_flow) #trueflow
    webhook('PoolORPadd',orp_flow) #trueflow
    webhook('PoolPH',ph)
    webhook('PoolORP',orp)
    webhook('PoolTemp',temp)
    webhook('PoolPHkanister',ph_liq)
    webhook('PoolORPkanister',cl_liq)

 
    #webhook('PoolWaTemp',8)

    # #testhook
    # try:
    #     r = requests.get('http://127.0.0.1:5000/mainpump?state=an')
    #     logger.debug('webhook status: %s text: %s', r.status_code, r.text)
    # except requests.exceptions.ConnectionError as e:
    #     logger.warning('webhook error: %s', e.args[0].reason)
    #     pass

    #wait xx seconds and loop on...
    time.sleep(15.0 - ((time.time() - starttime) % 15.0))
